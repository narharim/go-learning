// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book.sql

package database

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one

INSERT INTO books (
  author_id, title, description, published_year
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, author_id, title, description, published_year, created_at, updated_at
`

type CreateBookParams struct {
	AuthorID      int32          `json:"author_id"`
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	PublishedYear sql.NullInt32  `json:"published_year"`
}

// queries/002_book.sql
func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.queryRow(ctx, q.createBookStmt, createBook,
		arg.AuthorID,
		arg.Title,
		arg.Description,
		arg.PublishedYear,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Description,
		&i.PublishedYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteBookStmt, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, author_id, title, description, published_year, created_at, updated_at FROM books
WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.queryRow(ctx, q.getBookStmt, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Description,
		&i.PublishedYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBooksByAuthor = `-- name: ListBooksByAuthor :many
SELECT b.id, b.author_id, b.title, b.description, b.published_year, b.created_at, b.updated_at FROM books b
JOIN authors a ON b.author_id = a.id
WHERE a.id = $1
ORDER BY b.title
`

func (q *Queries) ListBooksByAuthor(ctx context.Context, id int32) ([]Book, error) {
	rows, err := q.query(ctx, q.listBooksByAuthorStmt, listBooksByAuthor, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Description,
			&i.PublishedYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET title = $2, description = $3, published_year = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, author_id, title, description, published_year, created_at, updated_at
`

type UpdateBookParams struct {
	ID            int32          `json:"id"`
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	PublishedYear sql.NullInt32  `json:"published_year"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.queryRow(ctx, q.updateBookStmt, updateBook,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.PublishedYear,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Description,
		&i.PublishedYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
